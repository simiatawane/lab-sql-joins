-- LAB | SQL Joins

-- Here are some tips to help you successfully complete the lab:

-- Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:
-- Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
-- Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
-- Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
-- Determine which table you want to include all records from. This will help you decide which type of JOIN to use.
-- If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN.
-- If you want records from both tables only where there is a match, use an INNER JOIN.
-- Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- Write the query

-- Tip 2: Break down the problem into smaller, more manageable parts.
-- For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join.
-- Test your queries as you go, and check the output carefully to make sure it matches what you expect.
-- This process takes time, so be patient and go step by step to build your query incrementally.

Use sakila;

-- 1. List the number of films per category.
SELECT c.name AS category_name, COUNT(fc.film_id) AS num_film
FROM sakila.film_category fc
JOIN sakila.category c USING (category_id)
GROUP BY category_name;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country
FROM sakila.store s
JOIN sakila.address a USING (address_id)
JOIN sakila.city c USING (city_id)
JOIN sakila.country co USING (country_id);

-- 3. Calculate the total revenue generated by each store in dollars.
-- COMMENT: you get a different answer depending on whether you use the customer or staff table
-- total values combined is the same but the split between stores is different
-- can the staff or customers move between stores given they are in Canada and Australia?
-- is the database corrupted?

SELECT s.store_id, SUM(p.amount) AS total_revenue -- 1) $33.48k 2) $33.92k Tot) $67.4k
FROM sakila.payment p
JOIN sakila.staff s USING (staff_id)
GROUP BY s.store_id;

SELECT c.store_id, SUM(p.amount) AS total_revenue -- 1) $37.0k 2) $30.4k Tot) $67.4k
FROM sakila.customer c
JOIN sakila.payment p USING (customer_id)
GROUP BY c.store_id;

-- 4. Determine the average running time of films for each category.
SELECT c.name AS category_name, ROUND( AVG(f.length) ) AS average_length_mins
FROM sakila.film f
JOIN sakila.film_category fc USING (film_id)
JOIN sakila.category c USING (category_id)
GROUP BY c.name;

-- 5. Identify the film categories with the longest average running time.
SELECT c.name AS category_name, ROUND( AVG(f.length) ) AS average_length_mins
FROM sakila.film f
JOIN sakila.film_category fc USING (film_id)
JOIN sakila.category c USING (category_id)
GROUP BY c.name
ORDER BY average_length_mins DESC LIMIT 4;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.inventory_id) AS rental_count
FROM sakila.film f
JOIN sakila.inventory i USING (film_id)
JOIN sakila.rental r USING (inventory_id)
GROUP BY f.title
ORDER BY COUNT(r.inventory_id) DESC LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT i.inventory_id, f.title
FROM sakila.inventory i
JOIN sakila.film f USING (film_id)
WHERE f.title = 'Academy Dinosaur' AND i.store_id = 1; -- there are 4 copies in inventory

SELECT DISTINCT -- or a super convoluted way :)
CASE
WHEN i.store_id = 1 AND f.title = 'Academy Dinosaur' THEN 'TRUE'
ELSE 'FALSE'
END AS it_can_be_rented_from_Store1
FROM sakila.inventory i
JOIN sakila.film f USING (film_id)
HAVING it_can_be_rented_from_Store1 = 'True';

-- 8. List of ALL film titles and if they are available in inventory.
SELECT COUNT(film_id) FROM sakila.film; -- 1000 films
SELECT COUNT( DISTINCT film_id) FROM sakila.inventory; -- 958 distinct films in inventory

SELECT DISTINCT f.title AS film_title,
CASE WHEN i.store_id IS NULL THEN 'not available'
ELSE 'available'
END AS film_availability -- new column
FROM sakila.film f
LEFT JOIN sakila.inventory i USING (film_id);
-- LEFT JOIN also includes the films not in inventory so all 1000 rows returned

